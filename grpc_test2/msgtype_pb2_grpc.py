# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import msgtype_pb2 as msgtype__pb2


class TheServerClassStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.FirstFn = channel.unary_unary(
        '/TheServerClass/FirstFn',
        request_serializer=msgtype__pb2.UserRequest.SerializeToString,
        response_deserializer=msgtype__pb2.ArticleResponse.FromString,
        )
    self.SecondFn = channel.unary_unary(
        '/TheServerClass/SecondFn',
        request_serializer=msgtype__pb2.UserRequest.SerializeToString,
        response_deserializer=msgtype__pb2.ArticleResponse.FromString,
        )


class TheServerClassServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def FirstFn(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SecondFn(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TheServerClassServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'FirstFn': grpc.unary_unary_rpc_method_handler(
          servicer.FirstFn,
          request_deserializer=msgtype__pb2.UserRequest.FromString,
          response_serializer=msgtype__pb2.ArticleResponse.SerializeToString,
      ),
      'SecondFn': grpc.unary_unary_rpc_method_handler(
          servicer.SecondFn,
          request_deserializer=msgtype__pb2.UserRequest.FromString,
          response_serializer=msgtype__pb2.ArticleResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'TheServerClass', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
